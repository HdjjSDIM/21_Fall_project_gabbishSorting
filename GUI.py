# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test3.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import time
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtWidgets import QGraphicsDropShadowEffect
import multiprocessing
import threading
from duoji import duoji
from face_detection import face_detection


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1280, 800)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        MainWindow.setWindowOpacity(1.0)
        MainWindow.setStyleSheet("background-image:url(E:/python learing/GUI/新背景图片.png)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # 空白处按钮
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(-10, -10, 1380, 900))
        self.pushButton_4.setAutoFillBackground(False)
        self.pushButton_4.setObjectName("pushButton4")
        self.pushButton_4.setIconSize(QtCore.QSize(1380, 900))
        self.pushButton_4.clicked.connect(self.clickButton4)

        # 可回收按钮
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(150, 100, 120, 120))
        self.pushButton.setAutoFillBackground(False)
        self.pushButton.setStyleSheet("background-color:rgb(170,170,225);\n"
"\n"
"border-radius:60px\n"
"")
        self.pushButton.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("E:/python learing/GUI/新可回收标志.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(120, 120))
        self.pushButton.setObjectName("pushButton")
        # 绑定点击事件
        self.pushButton.clicked.connect(self.clickButton1)

        # 不可回收按钮
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(150, 300, 120, 120))
        self.pushButton_2.setAutoFillBackground(False)
        self.pushButton_2.setStyleSheet("border-radius:60px\n"
"\n"
"\n"
"")
        self.pushButton_2.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("E:/python learing/GUI/新不可回收标志.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton_2.setIcon(icon1)
        self.pushButton_2.setIconSize(QtCore.QSize(120, 120))
        self.pushButton_2.setObjectName("pushButton2")
        # 绑定点击事件
        self.pushButton_2.clicked.connect(self.clickButton2)

        # 清洁模式按钮
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(150, 500, 120, 120))
        self.pushButton_3.setAutoFillBackground(False)
        self.pushButton_3.setStyleSheet("border-radius:60px\n"
        
"\n"
"\n"
"")
        self.pushButton_3.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("E:/python learing/GUI/清洁模式标志.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton_3.setIcon(icon2)
        self.pushButton_3.setIconSize(QtCore.QSize(120, 120))
        self.pushButton_3.setObjectName("pushButton3")
        # 绑定点击事件
        self.pushButton_3.clicked.connect(self.clickButton3)

#创建label
        # 核对垃圾信息窗口
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(305, 100, 855, 530))
        self.label_4.setStyleSheet("background-image:url(E:/python learing/GUI/可回收垃圾核对.png)")
        self.label_4.setObjectName("label4")
        self.label_4.setVisible(False)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(305, 100, 855, 530))
        self.label_5.setStyleSheet("background-image:url(E:/python learing/GUI/不可回收垃圾核对.png)")
        self.label_5.setObjectName("label5")
        self.label_5.setVisible(False)
        #再次点击提示
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1280, 43))
        self.label.setStyleSheet("background-image:url(E:/python learing/GUI/请确认您的垃圾受否属于该种类，再次点击将开盖.png)")
        self.label.setObjectName("label1")
        self.label.setVisible(False)
        #正在开盖提示
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 0, 1280, 800))
        self.label_2.setStyleSheet("background-image:url(E:/python learing/GUI/正在开盖，请稍等…….png)")
        self.label_2.setObjectName("label2")
        self.label_2.setVisible(False)
        #正在关闭提示
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(0, 0, 1280, 800))
        self.label_3.setStyleSheet("background-image:url(E:/python learing/GUI/正在关闭，请稍等…….png)")
        self.label_3.setObjectName("label3")
        self.label_3.setVisible(False)
        #垃圾分类宣传图片
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(305, 100, 855, 530))
        self.label_6.setStyleSheet("background-image:url(E:/python learing/GUI/垃圾分类污染图1.png)\n"
                                   )
        self.label_6.setObjectName("AD1")
        self.label_6.setVisible(True)


 # 关闭盖子按钮
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(554, 617, 153, 88))
        self.pushButton_5.setAutoFillBackground(False)
        self.pushButton_5.setStyleSheet("border-radius:10px\n"
                                        "\n"
                                        "\n"
                                        "")
        self.pushButton_5.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("E:/python learing/GUI/关闭按钮.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.pushButton_5.setIcon(icon5)
        self.pushButton_5.setIconSize(QtCore.QSize(153, 88))
        self.pushButton_5.setObjectName("pushButton5")
        self.pushButton_5.setVisible(False)
        self.pushButton_5.clicked.connect(self.closeCover)
        #按钮添加阴影
        self.add_shadow(self.pushButton)
        self.add_shadow(self.pushButton_2)
        self.add_shadow(self.pushButton_3)
        self.add_shadow(self.pushButton_4)
        self.add_shadow(self.pushButton_5)
        self.add_shadow2(self.label)
        self.add_shadow2(self.label_2)
        self.add_shadow2(self.label_3)
        self.add_shadow2(self.label_4)
        self.add_shadow2(self.label_5)
        self.add_shadow2(self.label_6)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)




    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "垃圾分类"))


#定义按钮点击事件
    def clickButton1(self):
        if self.pushButton.objectName()=="pushButton_beforeOpen":
            print("1111")
            self.pushButton.setObjectName("pushButton_afterOpen")
            #self.label_4.setVisible(False)
            self.openCover()
        if self.pushButton_2.objectName()=="pushButton2" and self.pushButton_3.objectName()=="pushButton3"and self.pushButton.objectName()=="pushButton":
            print("111")
            self.pushButton.setIcon(QIcon(QPixmap("E:/python learing/GUI/确认标志.png")))  # 点击后切换按钮图片
            self.pushButton.setObjectName("pushButton_beforeOpen")
            self.label.setVisible(True)
            self.label_4.setVisible(True)
            self.label_6.setVisible(False)

    def clickButton2(self):
        if self.pushButton_2.objectName()=="pushButton2_beforeOpen":
            print("1111")
            self.pushButton_2.setObjectName("pushButton2_afterOpen")
            self.openCover()
        if self.pushButton.objectName()=="pushButton" and self.pushButton_3.objectName()=="pushButton3"and self.pushButton_2.objectName()=="pushButton2":
            print("222")
            self.pushButton_2.setIcon(QIcon(QPixmap("E:/python learing/GUI/确认标志.png")))  # 点击后切换按钮图片
            self.pushButton_2.setObjectName("pushButton2_beforeOpen")
            self.label.setVisible(True)
            self.label_5.setVisible(True)
            self.label_6.setVisible(False)
    def clickButton3(self):
        if self.pushButton_3.objectName()=="pushButton3_beforeOpen":
            print("1111")
            self.pushButton_3.setObjectName("pushButton3_afterOpen")
            #self.openCover()
        if self.pushButton.objectName() == "pushButton" and self.pushButton_2.objectName() == "pushButton2"and self.pushButton_3.objectName()=="pushButton3":
            print("333")
            self.pushButton_3.setIcon(QIcon(QPixmap("E:/python learing/GUI/确认标志.png"))) #点击后切换按钮图片
            self.pushButton_3.setObjectName("pushButton3_beforeOpen")
            self.label.setVisible(True)
            self.label_6.setVisible(False)
    def clickButton4(self):
        print("444")
        self.pushButton.setIcon(QIcon(QPixmap("E:/python learing/GUI/新可回收标志.png")))  # 点击后切换按钮图片
        self.pushButton_2.setIcon(QIcon(QPixmap("E:/python learing/GUI/新不可回收标志.png")))  # 点击后切换按钮图片
        self.pushButton_3.setIcon(QIcon(QPixmap("E:/python learing/GUI/清洁模式标志.png")))  # 点击后切换按钮图片
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2.setObjectName("pushButton2")
        self.pushButton_3.setObjectName("pushButton3")
        self.label.setVisible(False)
        self.label_4.setVisible(False)
        self.label_5.setVisible(False)
        self.label_6.setVisible(True)

    #开盖丢垃圾程序
    def openCover(self):
        # global MainWindow
        print("openning")
        self.label.setVisible(False)
        self.label_5.setVisible(False)
        self.label_4.setVisible(False)
        self.label.repaint()
        self.label_4.repaint()
        self.label_2.setVisible(True)
        self.label_2.repaint()#缓冲协调#########################################
        # 现在我们尝试在这里用多线程同时控制两个任务：任务1是灯条闪烁；任务2是舵机转动开盖
        p1 = threading.Thread(target=face_detection().light_shinning)
        p2 = threading.Thread(target=duoji().motor_control)
        p1.start()
        p2.start()
        time.sleep(4)#开盖等待时间
        self.pushButton_5.setVisible(True)
    #关盖程序
    def closeCover(self):
        print("close")
        self.label_2.setVisible(False)
        self.pushButton_5.setVisible(False)
        self.label_3.setVisible(True)
        self.label_3.repaint()
        time.sleep(4)#关盖等待时间
        self.label_3.setVisible(False)
        self.clickButton4()

    # 按钮阴影特效
    def add_shadow(self, button):
        # 添加阴影
        self.effect_shadow = QGraphicsDropShadowEffect(self.centralwidget)
        self.effect_shadow.setOffset(0, 0)  # 偏移
        self.effect_shadow.setBlurRadius(10)  # 阴影半径
        self.effect_shadow.setColor(QtCore.Qt.black)  # 阴影颜色
        button.setGraphicsEffect(self.effect_shadow)  # 将设置套用到button窗口中

    def add_shadow2(self, label):
        # 添加阴影
        self.effect_shadow = QGraphicsDropShadowEffect(self.centralwidget)
        self.effect_shadow.setOffset(0, 0)  # 偏移
        self.effect_shadow.setBlurRadius(10)  # 阴影半径
        self.effect_shadow.setColor(QtCore.Qt.black)  # 阴影颜色
        label.setGraphicsEffect(self.effect_shadow)  # 将设置套用到label窗口中



if __name__ == '__main__':
    multiprocessing.freeze_support()
    app=QtWidgets.QApplication(sys.argv)
    MainWindow=QtWidgets.QMainWindow()
    ui=Ui_MainWindow()  #调用主函数
    ui.setupUi(MainWindow)  #初始化
    MainWindow.show() #显示
    sys.exit(app.exec_())   #点击关闭才退出
